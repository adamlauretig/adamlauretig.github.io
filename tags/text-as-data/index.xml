<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Text as Data on Adam Lauretig</title>
    <link>/adamlauretig.github.io/tags/text-as-data/</link>
    <description>Recent content in Text as Data on Adam Lauretig</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 10 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/adamlauretig.github.io/tags/text-as-data/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tokenizing on Stopwords</title>
      <link>/adamlauretig.github.io/post/tokenizing-on-stopwords/</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/adamlauretig.github.io/post/tokenizing-on-stopwords/</guid>
      <description>Introduction Recently, I came across the idea that you can get relevant keywords for word2vec by tokenizing a corpus on stopwords, in addition to standard punctuation (found via). This seemed like a really cool unsupervised way of capturing (hopefully!) relevant phrases. I was intrigued.
A brief note: “tokenizing” refers to splitting a document into words or phrases based on a pre-defined set of rules. The most common way to do this is by splitting on spaces and “end-of-sentence” punctuation (ex: “!</description>
    </item>
    
  </channel>
</rss>